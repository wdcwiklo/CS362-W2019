Results for unittest:

unittest1.c:
---------------------------------------------
Beginning Unit Test 1: fullDeckCount Function
---------------------------------------------
Test 1:
SUCCESS: game state unchanged
Counted 3 out of expected 3 cards
Test 2:
SUCCESS: game state unchanged
Counted 7 out of expected 7 cards
Test 3:
SUCCESS: game state unchanged
Counted 3 out of expected 3 cards

Unit Test 1 Complete: Passed 3 out of 3 tests

unittest2.c:
---------------------------------------------
Beginning Unit Test 2: scoreFor Function
---------------------------------------------
Test 1:
FAILURE: game state unchanged BUT
Found score 1 out of expected 3
Test 2:
FAILURE: game state unchanged BUT
Found score 8 out of expected 12
Test 3:
FAILURE: game state unchanged BUT
Found score 26 out of expected 30
Test 4:
FAILURE: game state unchanged BUT
Found score 45 out of expected 48
Test 5:
FAILURE: game state unchanged BUT
Found score 45 out of expected 43
Test 6:
FAILURE: game state unchanged BUT
Found score 45 out of expected 47

Unit Test 2 Complete: Passed 0 out of 6 tests

unittest3.c:
---------------------------------------------
Beginning Unit Test 3: isGameOver Function
---------------------------------------------
Test 1:
SUCCESS: game state unchanged
Game not over as expected
Test 2:
SUCCESS: game state unchanged
Game is over as expected
Test 3:
SUCCESS: game state unchanged
Game not over as expected
Test 4:
SUCCESS: game state unchanged
Game not over as expected
Test 5:
SUCCESS: game state unchanged
Game is over as expected

Unit Test 3 Complete: Passed 5 out of 5 tests

unittest4.c:
---------------------------------------------
Beginning Unit Test 4: updateCoins Function
---------------------------------------------
Test 1:
Found 0 coins as expected
SUCCESS: game state unchanged
Test 2:
Found 5 coins as expected
SUCCESS: game state unchanged
Test 3:
Found 6 coins as expected
SUCCESS: game state unchanged

Unit Test 4 Complete: Passed 3 out of 3 tests

cardtest1.c:
---------------------------------------------
Beginning Card Test 1: Smithy
---------------------------------------------
Test 1:
Correct number of cards drawn
Discard failed: Smithy still in hand
Test 2:
Correct number of cards drawn
Discard failed: Smithy still in hand
Test 3:
Correct number of cards drawn
Discard failed: Smithy still in hand

Card Test 1 Complete: Passed 0 out of 3 tests

cardtest2.c:
---------------------------------------------
Beginning Card Test 2: Adventurer
---------------------------------------------
Test 1:
Incorrect number of cards added to hand. Added 3 cards
Correct: a treasure card was added
Correct: a treasure card was added
Correct: a treasure card was added
Test 2:
Incorrect number of cards added to hand. Added 4 cards
Correct: a treasure card was added
Correct: a treasure card was added
Correct: a treasure card was added
Correct: a treasure card was added
Test 3:
Incorrect number of cards added to hand. Added 0 cards

Card Test 1 Complete: Passed 0 out of 3 tests

cardtest3.c:
---------------------------------------------
Beginning Card Test 3: Village
---------------------------------------------
Test 1:
Correct number of cards drawn
Correct number of actions added
Village discarded
Test 2:
Correct number of cards drawn
Correct number of actions added
Village discarded

Card Test 3 Complete: Passed 2 out of 2 tests

cardtest4.c:
---------------------------------------------
Beginning Card Test 4: Great Hall
---------------------------------------------
Test 1:
Incorrect number of cards drawn. Drew 2 cards
Incorrect number of actions added. Added 3 actions
Great Hall discarded
Test 2:
Incorrect number of cards drawn. Drew 2 cards
Incorrect number of actions added. Added 3 actions
Great Hall discarded

Card Test 4 Complete: Passed 0 out of 2 tests

Function 'updateCoins'
Lines executed:100.00% of 11
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'cardEffect'
Lines executed:0.00% of 205
Branches executed:0.00% of 179
Taken at least once:0.00% of 179
Calls executed:0.00% of 58

Function 'playGreat_hall'
Lines executed:100.00% of 6
No branches
Calls executed:100.00% of 3

Function 'playVillage'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

Function 'playCouncil_room'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
Calls executed:0.00% of 3

Function 'playSmithy'
Lines executed:100.00% of 4
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 1

Function 'playAdventurer'
Lines executed:100.00% of 17
Branches executed:100.00% of 12
Taken at least once:91.67% of 12
Calls executed:100.00% of 2

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:100.00% of 24
Branches executed:100.00% of 42
Taken at least once:73.81% of 42
Calls executed:33.33% of 3

Function 'isGameOver'
Lines executed:100.00% of 10
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:0.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:100.00% of 9
Branches executed:100.00% of 12
Taken at least once:100.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:34.35% of 559
Branches executed:36.28% of 419
Taken at least once:30.79% of 419
Calls executed:17.89% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:275
        -:    0:Programs:260
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 8258 returned 100% blocks executed 83%
     8258:    8:int compare(const void* a, const void* b) {
     8258:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
     8258:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
     2200:   12:    return -1;
     6058:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 275 returned 100% blocks executed 88%
      275:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      275:   44:  SelectStream(1);
call    0 returned 100%
      275:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
      275:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      275:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     3025:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
    30250:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
    27500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      275:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
      275:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      275:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
      275:   89:      state->supplyCount[estate] = 8;
      275:   90:      state->supplyCount[duchy] = 8;
      275:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      275:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      275:  102:  state->supplyCount[silver] = 40;
      275:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     5775:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
    45375:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
    42625:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     2750:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
     1100:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      550:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     2200:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     2750:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    39875:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      825:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
      550:  140:      state->deckCount[i] = 0;
     2200:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
     1650:  143:	  state->deck[i][j] = estate;
     1650:  144:	  state->deckCount[i]++;
        -:  145:	}
     4400:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
     3850:  148:	  state->deck[i][j] = copper;
     3850:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      825:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
      550:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      825:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      550:  166:      state->handCount[i] = 0;
      550:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     7700:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
     7425:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      275:  182:  state->outpostPlayed = 0;
      275:  183:  state->phase = 0;
      275:  184:  state->numActions = 1;
      275:  185:  state->numBuys = 1;
      275:  186:  state->playedCardCount = 0;
      275:  187:  state->whoseTurn = 0;
      275:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     1650:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     1375:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
      275:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
      275:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 730 returned 100% blocks executed 100%
      730:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      730:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      730:  209:  if (state->deckCount[player] < 1)
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
      172:  210:    return -1;
      558:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     6632:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     5516:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     5516:  216:    newDeck[newDeckPos] = state->deck[player][card];
     5516:  217:    newDeckPos++;
    19274:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
    13758:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     5516:  221:    state->deckCount[player]--;
        -:  222:  }
     6074:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     5516:  224:    state->deck[player][i] = newDeck[i];
     5516:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      558:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 175 returned 100% blocks executed 100%
      175:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
      175:  326:  int count = 0;
        -:  327:
     1505:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
        -:  329:    {
     1330:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
        -:  331:    }
        -:  332:
     1505:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
        -:  334:    {
     1330:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
        -:  336:    }
        -:  337:
      490:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 64%
branch  1 taken 36% (fallthrough)
        -:  339:    {
      315:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -:  341:    }
        -:  342:
      175:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 175 returned 100% blocks executed 100%
      175:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      175:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  396:    {
       35:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      140:  401:  j = 0;
     3640:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
     3500:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  405:	{
      210:  406:	  j++;
        -:  407:	}
        -:  408:    }
      140:  409:  if ( j >= 3)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  410:    {
       35:  411:      return 1;
        -:  412:    }
        -:  413:
      105:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 210 returned 100% blocks executed 74%
      210:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
      210:  420:  int score = 0;
        -:  421:  //score from hand
     1925:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
        -:  423:    {
     1715:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
     1715:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
     1715:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     1715:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
     1715:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
     1715:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
call    2 returned 100%
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
      700:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  434:    {
      490:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      490:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      490:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
      490:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
      490:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      490:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
      700:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  445:    {
      490:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      490:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 57% (fallthrough)
branch  1 taken 43%
      490:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      490:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      490:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      490:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  452:    }
        -:  453:
      210:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 1912 returned 100% blocks executed 100%
     1912:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     1912:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      124:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 13%
branch  1 taken 87% (fallthrough)
       16:  534:      state->deck[player][i] = state->discard[player][i];
       16:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      108:  538:    state->deckCount[player] = state->discardCount[player];
      108:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      108:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      108:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      108:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      108:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      108:  559:    if (deckCounter == 0)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
      100:  560:      return -1;
        -:  561:
        8:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        8:  563:    state->deckCount[player]--;
        8:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     1804:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     1804:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     1804:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1804:  576:    state->deckCount[player]--;
     1804:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     1812:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function playAdventurer called 48 returned 100% blocks executed 100%
       48:  646:int playAdventurer(int currentPlayer, struct gameState *state)
        -:  647:{
        -:  648:	int temphand[MAX_HAND];
       48:  649:	int z = 0; //counter for temphand
        -:  650:	int cardDrawn;
       48:  651:	int drawntreasure = 0;
        -:  652:
      368:  653:	while(drawntreasure<4)
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
        -:  654:	{
      272:  655:		if (state->deckCount[currentPlayer] <1)
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
        -:  656:		{//if the deck is empty we need to shuffle discard and add to deck
       72:  657:			shuffle(currentPlayer, state);
call    0 returned 100%
        -:  658:		}
        -:  659:	
      272:  660:		drawCard(currentPlayer, state);
call    0 returned 100%
      272:  661:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  662:	
      272:  663:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 44% (fallthrough)
branch  5 taken 56%
      192:  664:			drawntreasure++;
        -:  665:		else
        -:  666:		{
       80:  667:			temphand[z]=cardDrawn;
       80:  668:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       80:  669:			z++;
        -:  670:		}
        -:  671:	}	
        -:  672:
      176:  673:	while(z-1>=0)
branch  0 taken 63%
branch  1 taken 38% (fallthrough)
        -:  674:	{
       80:  675:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       80:  676:		z=z-1;
        -:  677:	}
       48:  678:	return 0;			
        -:  679:}
        -:  680:
function playSmithy called 50 returned 100% blocks executed 100%
       50:  681:int playSmithy(int currentPlayer, struct gameState *state, int handPos)
        -:  682:{
        -:  683:	int i;
        -:  684:
        -:  685:	//+3 Cards
      200:  686:	for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  687:	{
      150:  688:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  689:	}
        -:  690:			
        -:  691:	//discard card from hand
        -:  692:	//discardCard(handPos, currentPlayer, state, 0);
        -:  693:
       50:  694:	return 0;
        -:  695:}
        -:  696:
function playCouncil_room called 0 returned 0% blocks executed 0%
    #####:  697:int playCouncil_room(int currentPlayer, struct gameState *state, int handPos)
        -:  698:{
        -:  699:	int i, j;
        -:  700:
        -:  701:	//+4 Cards
    #####:  702:	for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  703:	{
    #####:  704:		drawCard(currentPlayer, state);
call    0 never executed
        -:  705:	}
        -:  706:			
        -:  707:	//+1 Buy
    #####:  708:	state->numBuys++;
        -:  709:			
        -:  710:	//Each other player draws a card
    #####:  711:	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  712:	{
    #####:  713:		if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  714:		{
    #####:  715:			for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
    #####:  716:				drawCard(i, state);
call    0 never executed
        -:  717:		}
        -:  718:	}
        -:  719:			
        -:  720:	//put played card in played card pile
    #####:  721:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  722:			
    #####:  723:	return 0;
        -:  724:}
        -:  725:
function playVillage called 78 returned 100% blocks executed 100%
       78:  726:int playVillage(int currentPlayer, struct gameState *state, int handPos)
        -:  727:{
        -:  728:	//+1 Card
       78:  729:	drawCard(currentPlayer, state);
call    0 returned 100%
        -:  730:			
        -:  731:	//+2 Actions
       78:  732:	state->numActions = state->numActions + 2;
        -:  733:			
        -:  734:	//discard played card from hand
       78:  735:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  736:
       78:  737:	return 0;
        -:  738:}
        -:  739:
function playGreat_hall called 37 returned 100% blocks executed 100%
       37:  740:int playGreat_hall(int currentPlayer, struct gameState *state, int handPos)
        -:  741:{
        -:  742:	//+1 Card
       37:  743:	drawCard(currentPlayer, state);
call    0 returned 100%
        -:  744:			
        -:  745:	//+1 Actions
       37:  746:	state->numActions++;
        -:  747:			
        -:  748:	//discard card from hand
       37:  749:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  750:
       37:  751:	playVillage(currentPlayer, state, handPos);
call    0 returned 100%
        -:  752:
       37:  753:	return 0;
        -:  754:}
        -:  755:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  756:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  757:{
        -:  758:  int i;
        -:  759:  int j;
        -:  760:  int k;
        -:  761:  int x;
        -:  762:  int index;
    #####:  763:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  764:  int nextPlayer = currentPlayer + 1;
        -:  765:
    #####:  766:  int tributeRevealedCards[2] = {-1, -1};
        -:  767:  int temphand[MAX_HAND];// moved above the if statement
        -:  768:
    #####:  769:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  770:    nextPlayer = 0;
        -:  771:  }
        -:  772:  
        -:  773:	
        -:  774:  //uses switch to select card and perform actions
    #####:  775:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  776:    {
        -:  777:    case adventurer:
    #####:  778:	playAdventurer(currentPlayer, state);
call    0 never executed
        -:  779:
        -:  780:    case council_room:
    #####:  781:	playCouncil_room(currentPlayer, state, handPos);
call    0 never executed
        -:  782:		
        -:  783:    case feast:
        -:  784:      //gain card with cost up to 5
        -:  785:      //Backup hand
    #####:  786:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  787:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  788:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  789:      }
        -:  790:      //Backup hand
        -:  791:
        -:  792:      //Update Coins for Buy
    #####:  793:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  794:      x = 1;//Condition to loop on
    #####:  795:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  796:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  797:	  if (DEBUG)
        -:  798:	    printf("None of that card left, sorry!\n");
        -:  799:
        -:  800:	  if (DEBUG){
        -:  801:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  802:	  }
        -:  803:	}
    #####:  804:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  805:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  806:
        -:  807:	  if (DEBUG){
        -:  808:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  809:	  }
        -:  810:	}
        -:  811:	else{
        -:  812:
        -:  813:	  if (DEBUG){
        -:  814:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  815:	  }
        -:  816:
    #####:  817:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  818:	  x = 0;//No more buying cards
        -:  819:
        -:  820:	  if (DEBUG){
        -:  821:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  822:	  }
        -:  823:
        -:  824:	}
        -:  825:      }     
        -:  826:
        -:  827:      //Reset Hand
    #####:  828:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  829:	state->hand[currentPlayer][i] = temphand[i];
    #####:  830:	temphand[i] = -1;
        -:  831:      }
        -:  832:      //Reset Hand
        -:  833:      			
    #####:  834:      return 0;
        -:  835:			
        -:  836:    case gardens:
    #####:  837:      return -1;
        -:  838:			
        -:  839:    case mine:
    #####:  840:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  841:
    #####:  842:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  843:	{
    #####:  844:	  return -1;
        -:  845:	}
        -:  846:		
    #####:  847:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  848:	{
    #####:  849:	  return -1;
        -:  850:	}
        -:  851:
    #####:  852:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  853:	{
    #####:  854:	  return -1;
        -:  855:	}
        -:  856:
    #####:  857:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  858:
        -:  859:      //discard card from hand
    #####:  860:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  861:
        -:  862:      //discard trashed card
    #####:  863:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  864:	{
    #####:  865:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  866:	    {
    #####:  867:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  868:	      break;
        -:  869:	    }
        -:  870:	}
        -:  871:			
    #####:  872:      return 0;
        -:  873:			
        -:  874:    case remodel:
    #####:  875:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  876:
    #####:  877:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  878:	{
    #####:  879:	  return -1;
        -:  880:	}
        -:  881:
    #####:  882:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  883:
        -:  884:      //discard card from hand
    #####:  885:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  886:
        -:  887:      //discard trashed card
    #####:  888:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  889:	{
    #####:  890:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  891:	    {
    #####:  892:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  893:	      break;
        -:  894:	    }
        -:  895:	}
        -:  896:
        -:  897:
    #####:  898:      return 0;
        -:  899:		
        -:  900:    case smithy:
    #####:  901:	playSmithy(currentPlayer, state, handPos);
call    0 never executed
        -:  902:		
        -:  903:    case village:
    #####:  904:	playVillage(currentPlayer, state, handPos);
call    0 never executed
        -:  905:		
        -:  906:    case baron:
    #####:  907:      state->numBuys++;//Increase buys by 1!
    #####:  908:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  909:	int p = 0;//Iterator for hand!
    #####:  910:	int card_not_discarded = 1;//Flag for discard set!
    #####:  911:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  912:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  913:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  914:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  915:	    state->discardCount[currentPlayer]++;
    #####:  916:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  917:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  918:	    }
    #####:  919:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  920:	    state->handCount[currentPlayer]--;
    #####:  921:	    card_not_discarded = 0;//Exit the loop
        -:  922:	  }
    #####:  923:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  924:	    if(DEBUG) {
        -:  925:	      printf("No estate cards in your hand, invalid choice\n");
        -:  926:	      printf("Must gain an estate if there are any\n");
        -:  927:	    }
    #####:  928:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  929:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  930:	      state->supplyCount[estate]--;//Decrement estates
    #####:  931:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  932:		isGameOver(state);
call    0 never executed
        -:  933:	      }
        -:  934:	    }
    #####:  935:	    card_not_discarded = 0;//Exit the loop
        -:  936:	  }
        -:  937:			    
        -:  938:	  else{
    #####:  939:	    p++;//Next card
        -:  940:	  }
        -:  941:	}
        -:  942:      }
        -:  943:			    
        -:  944:      else{
    #####:  945:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  946:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  947:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  948:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  949:	    isGameOver(state);
call    0 never executed
        -:  950:	  }
        -:  951:	}
        -:  952:      }
        -:  953:	    
        -:  954:      
    #####:  955:      return 0;
        -:  956:		
        -:  957:    case great_hall:
    #####:  958:	playGreat_hall(currentPlayer, state, handPos);
call    0 never executed
        -:  959:		
        -:  960:    case minion:
        -:  961:      //+1 action
    #####:  962:      state->numActions++;
        -:  963:			
        -:  964:      //discard card from hand
    #####:  965:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  966:			
    #####:  967:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  968:	{
    #####:  969:	  state->coins = state->coins + 2;
        -:  970:	}
        -:  971:			
    #####:  972:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  973:	{
        -:  974:	  //discard hand
    #####:  975:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  976:	    {
    #####:  977:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  978:	    }
        -:  979:				
        -:  980:	  //draw 4
    #####:  981:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  982:	    {
    #####:  983:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  984:	    }
        -:  985:				
        -:  986:	  //other players discard hand and redraw if hand size > 4
    #####:  987:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  988:	    {
    #####:  989:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  990:		{
    #####:  991:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  992:		    {
        -:  993:		      //discard hand
    #####:  994:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  995:			{
    #####:  996:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  997:			}
        -:  998:							
        -:  999:		      //draw 4
    #####: 1000:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1001:			{
    #####: 1002:			  drawCard(i, state);
call    0 never executed
        -: 1003:			}
        -: 1004:		    }
        -: 1005:		}
        -: 1006:	    }
        -: 1007:				
        -: 1008:	}
    #####: 1009:      return 0;
        -: 1010:		
        -: 1011:    case steward:
    #####: 1012:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1013:	{
        -: 1014:	  //+2 cards
    #####: 1015:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1016:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1017:	}
    #####: 1018:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1019:	{
        -: 1020:	  //+2 coins
    #####: 1021:	  state->coins = state->coins + 2;
        -: 1022:	}
        -: 1023:      else
        -: 1024:	{
        -: 1025:	  //trash 2 cards in hand
    #####: 1026:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1027:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1028:	}
        -: 1029:			
        -: 1030:      //discard card from hand
    #####: 1031:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1032:      return 0;
        -: 1033:		
        -: 1034:    case tribute:
    #####: 1035:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1036:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1037:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1038:	  state->deckCount[nextPlayer]--;
        -: 1039:	}
    #####: 1040:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1041:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1042:	  state->discardCount[nextPlayer]--;
        -: 1043:	}
        -: 1044:	else{
        -: 1045:	  //No Card to Reveal
        -: 1046:	  if (DEBUG){
        -: 1047:	    printf("No cards to reveal\n");
        -: 1048:	  }
        -: 1049:	}
        -: 1050:      }
        -: 1051:	    
        -: 1052:      else{
    #####: 1053:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1054:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1055:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1056:	    state->deckCount[nextPlayer]++;
    #####: 1057:	    state->discard[nextPlayer][i] = -1;
    #####: 1058:	    state->discardCount[nextPlayer]--;
        -: 1059:	  }
        -: 1060:			    
    #####: 1061:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1062:	} 
    #####: 1063:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1064:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1065:	state->deckCount[nextPlayer]--;
    #####: 1066:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1067:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1068:	state->deckCount[nextPlayer]--;
        -: 1069:      }    
        -: 1070:		       
    #####: 1071:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1072:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1073:	state->playedCardCount++;
    #####: 1074:	tributeRevealedCards[1] = -1;
        -: 1075:      }
        -: 1076:
    #####: 1077:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1078:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1079:	  state->coins += 2;
        -: 1080:	}
        -: 1081:		    
    #####: 1082:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1083:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1084:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1085:	}
        -: 1086:	else{//Action Card
    #####: 1087:	  state->numActions = state->numActions + 2;
        -: 1088:	}
        -: 1089:      }
        -: 1090:	    
    #####: 1091:      return 0;
        -: 1092:		
        -: 1093:    case ambassador:
    #####: 1094:      j = 0;		//used to check if player has enough cards to discard
        -: 1095:
    #####: 1096:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1097:	{
    #####: 1098:	  return -1;				
        -: 1099:	}
        -: 1100:
    #####: 1101:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1102:	{
    #####: 1103:	  return -1;
        -: 1104:	}
        -: 1105:
    #####: 1106:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1107:	{
    #####: 1108:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1109:	    {
    #####: 1110:	      j++;
        -: 1111:	    }
        -: 1112:	}
    #####: 1113:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1114:	{
    #####: 1115:	  return -1;				
        -: 1116:	}
        -: 1117:
        -: 1118:      if (DEBUG) 
        -: 1119:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1120:
        -: 1121:      //increase supply count for choosen card by amount being discarded
    #####: 1122:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1123:			
        -: 1124:      //each other player gains a copy of revealed card
    #####: 1125:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1126:	{
    #####: 1127:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1128:	    {
    #####: 1129:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1130:	    }
        -: 1131:	}
        -: 1132:
        -: 1133:      //discard played card from hand
    #####: 1134:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1135:
        -: 1136:      //trash copies of cards returned to supply
    #####: 1137:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1138:	{
    #####: 1139:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1140:	    {
    #####: 1141:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1142:		{
    #####: 1143:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1144:		  break;
        -: 1145:		}
        -: 1146:	    }
        -: 1147:	}			
        -: 1148:
    #####: 1149:      return 0;
        -: 1150:		
        -: 1151:    case cutpurse:
        -: 1152:
    #####: 1153:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1154:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1155:	{
    #####: 1156:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1157:	    {
    #####: 1158:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1159:		{
    #####: 1160:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1161:		    {
    #####: 1162:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1163:		      break;
        -: 1164:		    }
    #####: 1165:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1166:		    {
    #####: 1167:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1168:			{
        -: 1169:			  if (DEBUG)
        -: 1170:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1171:			}	
    #####: 1172:		      break;
        -: 1173:		    }		
        -: 1174:		}
        -: 1175:					
        -: 1176:	    }
        -: 1177:				
        -: 1178:	}				
        -: 1179:
        -: 1180:      //discard played card from hand
    #####: 1181:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1182:
    #####: 1183:      return 0;
        -: 1184:
        -: 1185:		
        -: 1186:    case embargo: 
        -: 1187:      //+2 Coins
    #####: 1188:      state->coins = state->coins + 2;
        -: 1189:			
        -: 1190:      //see if selected pile is in play
    #####: 1191:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1192:	{
    #####: 1193:	  return -1;
        -: 1194:	}
        -: 1195:			
        -: 1196:      //add embargo token to selected supply pile
    #####: 1197:      state->embargoTokens[choice1]++;
        -: 1198:			
        -: 1199:      //trash card
    #####: 1200:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1201:      return 0;
        -: 1202:		
        -: 1203:    case outpost:
        -: 1204:      //set outpost flag
    #####: 1205:      state->outpostPlayed++;
        -: 1206:			
        -: 1207:      //discard card
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case salvager:
        -: 1212:      //+1 buy
    #####: 1213:      state->numBuys++;
        -: 1214:			
    #####: 1215:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1216:	{
        -: 1217:	  //gain coins equal to trashed card
    #####: 1218:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1219:	  //trash card
    #####: 1220:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1221:	}
        -: 1222:			
        -: 1223:      //discard card
    #####: 1224:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1225:      return 0;
        -: 1226:		
        -: 1227:    case sea_hag:
    #####: 1228:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1229:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1230:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1231:	  state->discardCount[i]++;
    #####: 1232:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1233:	}
        -: 1234:      }
    #####: 1235:      return 0;
        -: 1236:		
        -: 1237:    case treasure_map:
        -: 1238:      //search hand for another treasure_map
    #####: 1239:      index = -1;
    #####: 1240:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	{
    #####: 1242:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1243:	    {
    #####: 1244:	      index = i;
    #####: 1245:	      break;
        -: 1246:	    }
        -: 1247:	}
    #####: 1248:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1249:	{
        -: 1250:	  //trash both treasure cards
    #####: 1251:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1252:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1253:
        -: 1254:	  //gain 4 Gold cards
    #####: 1255:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1256:	    {
    #####: 1257:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1258:	    }
        -: 1259:				
        -: 1260:	  //return success
    #####: 1261:	  return 1;
        -: 1262:	}
        -: 1263:			
        -: 1264:      //no second treasure_map found in hand
    #####: 1265:      return -1;
        -: 1266:    }
        -: 1267:	
    #####: 1268:  return -1;
        -: 1269:}
        -: 1270:
function discardCard called 115 returned 100% blocks executed 78%
      115: 1271:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1272:{
        -: 1273:	
        -: 1274:  //if card is not trashed, added to Played pile 
      115: 1275:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1276:    {
        -: 1277:      //add card to played pile
      115: 1278:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      115: 1279:      state->playedCardCount++;
        -: 1280:    }
        -: 1281:	
        -: 1282:  //set played card to -1
      115: 1283:  state->hand[currentPlayer][handPos] = -1;
        -: 1284:	
        -: 1285:  //remove card from player's hand
      115: 1286:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1287:    {
        -: 1288:      //reduce number of cards in hand
    #####: 1289:      state->handCount[currentPlayer]--;
        -: 1290:    }
      115: 1291:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1292:    {
        -: 1293:      //reduce number of cards in hand
    #####: 1294:      state->handCount[currentPlayer]--;
        -: 1295:    }
        -: 1296:  else 	
        -: 1297:    {
        -: 1298:      //replace discarded card with last card in hand
      115: 1299:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1300:      //set last card to -1
      115: 1301:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1302:      //reduce number of cards in hand
      115: 1303:      state->handCount[currentPlayer]--;
        -: 1304:    }
        -: 1305:	
      115: 1306:  return 0;
        -: 1307:}
        -: 1308:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1309:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1310:{
        -: 1311:  //Note: supplyPos is enum of choosen card
        -: 1312:	
        -: 1313:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1314:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1315:    {
    #####: 1316:      return -1;
        -: 1317:    }
        -: 1318:	
        -: 1319:  //added card for [whoseTurn] current player:
        -: 1320:  // toFlag = 0 : add to discard
        -: 1321:  // toFlag = 1 : add to deck
        -: 1322:  // toFlag = 2 : add to hand
        -: 1323:
    #####: 1324:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1325:    {
    #####: 1326:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1327:      state->deckCount[player]++;
        -: 1328:    }
    #####: 1329:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1330:    {
    #####: 1331:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1332:      state->handCount[player]++;
        -: 1333:    }
        -: 1334:  else
        -: 1335:    {
    #####: 1336:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1337:      state->discardCount[player]++;
        -: 1338:    }
        -: 1339:	
        -: 1340:  //decrease number in supply pile
    #####: 1341:  state->supplyCount[supplyPos]--;
        -: 1342:	 
    #####: 1343:  return 0;
        -: 1344:}
        -: 1345:
function updateCoins called 350 returned 100% blocks executed 100%
      350: 1346:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1347:{
        -: 1348:  int i;
        -: 1349:	
        -: 1350:  //reset coin count
      350: 1351:  state->coins = 0;
        -: 1352:
        -: 1353:  //add coins for each Treasure card in player's hand
     1832: 1354:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 81%
branch  1 taken 19% (fallthrough)
        -: 1355:    {
     1482: 1356:      if (state->hand[player][i] == copper)
branch  0 taken 79% (fallthrough)
branch  1 taken 21%
        -: 1357:	{
     1166: 1358:	  state->coins += 1;
        -: 1359:	}
      316: 1360:      else if (state->hand[player][i] == silver)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1361:	{
       14: 1362:	  state->coins += 2;
        -: 1363:	}
      302: 1364:      else if (state->hand[player][i] == gold)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -: 1365:	{
       14: 1366:	  state->coins += 3;
        -: 1367:	}	
        -: 1368:    }	
        -: 1369:
        -: 1370:  //add bonus
      350: 1371:  state->coins += bonus;
        -: 1372:
      350: 1373:  return 0;
        -: 1374:}
        -: 1375:
        -: 1376:
        -: 1377://end of dominion.c
        -: 1378:
